### Validity Classification with ChatGPT ###
# Inspired by Clarke et al. (2023) and the Four Validities framework from Shadish et al. (2002)

# -------------------------------
# Install Required Packages (if needed)
# -------------------------------
install.packages(c("httr", "tidyverse", "openxlsx"))

# -------------------------------
# Load Required Libraries
# -------------------------------
library(httr)
library(tidyverse)
library(openxlsx)

# -------------------------------
# Function to Query ChatGPT via API
# -------------------------------
hey_chatGPT <- function(question, api_key) {
  response <- POST(
    url = "https://api.openai.com/v1/chat/completions",
    add_headers(Authorization = paste("Bearer", api_key)),
    content_type_json(),
    encode = "json",
    body = list(
      model = "gpt-4o",
      temperature = 0,
      messages = list(
        list(
          role = "user",
          content = question
        )
      )
    )
  )
  
  result <- content(response)$choices[[1]]$message$content
  if (!is.null(result) && result != "") {
    return(str_trim(result))
  } else {
    return(NA)
  }
}

# -------------------------------
# Set Your API Key (suggested: use environment variable for security)
# -------------------------------
my_API <- Sys.getenv("OPENAI_API_KEY")  # or replace with your actual API key (not recommended in code)

# -------------------------------
# Load Data (use appropriate path)
# -------------------------------
file_path <- "TE_Limitations.xlsx"  # adjust if needed
data <- read.xlsx(file_path)

# -------------------------------
# Initialize Column for Classifications
# -------------------------------
data$validity_classification <- NA

# -------------------------------
# Classification Loop Using Improved Prompt
# -------------------------------
for (i in 1:nrow(data)) {
  print(paste("Processing row:", i))
  
prompt <- paste(
  "Classify the following research limitation according to Shadish et al.'s (2002) Four Validities framework, as applied in Clarke et al. (2023).",
  "",
  "Use ONE of the following categories:",
  "",
  "1 = External Validity",
  "   → Definition: The extent to which the results can be generalized to other people, settings, times, or measures.",
  "   → Example threats: Non-representative samples, artificial settings, unrealistic stimuli, WEIRD samples.",
  "",
  "2 = Construct Validity",
  "   → Definition: The degree to which variables accurately represent the theoretical constructs they are meant to measure or manipulate.",
  "   → Example threats: Poor operational definitions, overreliance on self-report, short or unreliable scales.",
  "",
  "3 = Internal Validity",
  "   → Definition: The degree to which a causal conclusion is warranted, considering the absence of confounds or alternative explanations.",
  "   → Example threats: Confounding variables, unclear causal direction, third-variable problems.",
  "",
  "4 = Statistical Conclusion Validity",
  "   → Definition: The accuracy of inferences made about the existence (or nonexistence) of relationships based on statistical evidence.",
  "   → Example threats: Small sample sizes, low statistical power, misuse of significance testing, data dredging.",
  "",
  "5 = No limitation is present.",
  "6 = The limitation is unclear or cannot be identified.",
  "",
  "Respond ONLY with a single number: 1, 2, 3, 4, 5, or 6.",
  "",
  "Limitation: ", data$Limitation[i]
)

  
  result <- NA
  attempt <- 1
  max_attempts <- 3
  
  while (is.na(result) && attempt <= max_attempts) {
    result <- hey_chatGPT(prompt, my_API)
    attempt <- attempt + 1
    
    if (is.na(result)) {
      print("[Retrying due to empty response...]")
    }
  }
  
  if (is.na(result) || !(result %in% c("1", "2", "3", "4", "5", "6"))) {
    result <- "Unclassified"
  }
  
  print(result)
  data$validity_classification[i] <- result
}

# -------------------------------
# Save Results to Excel
# -------------------------------
output_file <- "XXX.xlsx"
write.xlsx(data, output_file, row.names = FALSE)
print(paste("Classification completed. Results saved to:", output_file))
